import React, { useState, useEffect, useCallback } from "react";
import Head from "next/head";
import Link from "next/link";
import CircularProgress from "@mui/material/CircularProgress";
import styles from "@/styles/Home.module.css";
// import { withPageAuthRequired } from '@auth0/nextjs-auth0'
import { useUser } from "@auth0/nextjs-auth0/client";
import CarsList from "@/components/CarsList";

export default function CarsListPage({ serverData = [] }) {
  const { isLoading, error, user } = useUser();

  const [isLoadingCars, setIsLoadingCars] = useState(serverData);
  const [carsError, setCarsError] = useState([]);
  const [cars, setCars] = useState(serverData);

  const removeCar = useCallback(async (id) => {
    try {
      if (!user) throw new Error("You need to be logged in");
      const response = await fetch(`/api/v1/cars/${id}`, {
        method: "DELETE",
      });
      if (!response.ok) throw response;
      console.log("deleted");
      const idx = cars.findIndex((car) => car._id === id);
      setCars([...cars.slice(0, idx), ...cars.slice(idx + 1)]);
    } catch (err) {
      console.log(err);
      alert(err.message);
    }
  }, [cars, setCars]);

  useEffect(() => {
    (async () => {
      try {
        if (!user) throw new Error("You need to be logged in");
        const response = await fetch("/api/v1/admin/cars");
        if (!response.ok) throw response;
        const data = await response.json();
        console.log(data);
        setCars(data);
        setCarsError(null);
      } catch (err) {
        setCarsError(err);
      } finally {
        setIsLoadingCars(false);
      }
    })();
  }, []);

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <header>
        <nav className={styles.nav}>
          {user ? (
            <Link href="/api/auth/logout">Log out</Link>
          ) : (
            <Link href="/api/auth/login">Log in</Link>
          )}

          <Link href="/private">Go to private page</Link>
          <Link href="/profile">Profile</Link>
          <Link href="/cars/add">Add Car</Link>
        </nav>
      </header>
      <main className={styles.main}>
        <section className={styles.description}>
          <h1 className={styles.heading}>Cars Page</h1>
          {isLoadingCars && <CircularProgress />}
          {!isLoadingCars && carsError && (
            <Alert severity="error">{carsError.message}</Alert>
          )}
          {!isLoadingCars && !carsError && user && cars && cars.length ? (
            <CarsList cars={cars} deleteHandler={removeCar} />
          ) : (
            <p>No cars to display</p>
          )}
        </section>
        <section className={styles.description}>
          {isLoading && <p>Loading</p>}
          {error && <p>{error.message}</p>}
          {user && (
            <div>
              <code>
                <pre>{JSON.stringify(user, null, "\t")}</pre>
              </code>
            </div>
          )}
        </section>
      </main>
    </>
  );
}

/****************************************************************
 * Static Site Generation
 ****************************************************************/
import { getCars } from "@/lib/cars/queries";
import { Alert } from "@mui/material";

// This function gets called at build time on server-side.
// It may be called again, on a serverless function, if
// revalidation is enabled and a new request comes in
export async function getStaticProps() {
  const cars = await getCars();
  return {
    props: {
      serverData: JSON.parse(JSON.stringify(cars)),
    },
  };
}

// export const getServerSideProps = withPageAuthRequired();
